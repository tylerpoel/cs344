Answers to lab03 for CS 344
Tyler Poel on February 21, 2020

Exercise 3.1:
a.  On the easiest puzzle AC-3 was the fastest by far, and successfully solved the problem. Backtracking took awhile,
    but did eventually find a solution. Both Depth-first search and Min-conflicts didn't find a solution at all.
    Depth-first search doesn't find a solution as it just goes down one branch, and to find the solution would need
    to visit almost every possible board, even incorrect ones, and this takes way too much time. Min-conflicts is
    essentially just hill climbing, and likely gets stuck in a local max, instead of finding the global one.
    Backtracking is effectively a smarter depth-first search, and backtracks when it can't make any more legal moves.
    As this approach takes some time, since the search space is relatively small it does produce a solution. AC-3 is
    the fastest as it does a really good job of satisfying the constraints in an efficient manner. Neither AC-3 or
    backtracking were able to solve the harder_aima or hardest_escargot Sudoku problems. I think that as the problems
    got harder, the search space simply was too big for either algorithm to effectively solve.

b.  Both of these settings should work well for sudoku. Before implementing them I thought that using the minimum-
    remaining-values would be the most effective, as it does what seems to be an intuitive and natural action for me
    when I think of how I would solve the problem. However forward-checking actually seemed to be slightly more
    effective, as when run on the same problem, the forward-checking algorithm completed it faster. Together though,
    both of these settings were very effective, as implementing them together solved the harder and hardest sudoku
    problems in a very short amount of time.


Exercise 3.2:
a.  AC-3 fails at every n value, even 1 n. I think this is due to how AC-3 tries to do all the pruning before hand, but
    for a problem like n-queens this approach doesn't work, simply because the board can be set up in multiple ways.
    Back-tracking gets up to 27, but for some reason fails at 2 and 3. I can't figure out why it fails at the lower
    numbers, but I do think its cap of 27 is simply that the problem space gets too large, and the algorithm takes too
    long.
    I tested Min-conflicts all the way up to 5500, and it was still solving the problem. It was taking a decent amount
    of time, which is why I stopped testing it, but I believe it could go even further if it was allowed to run the
    problem longer. Min-conflicts seems to work well here because it's algorithm actively works at exactly what the
    n-queens problem is: making sure there's no queen that can attack another queen. By being able to move queens
    around in their column to minimize conflicts it performs a very effective way to solve this problem, instead of
    just searching for solutions.

b.  Again, backtracking with MRV and forward-checking work the best. This ensures that set-ups where moving a queen
    will add another conflict are pruned, and that certain queens that have to be in certain positions are tried first.
    It's a much smarter way to implement backtracking, and greatly increases the effectiveness fo the algorithm. With
    these settings I was able to see backtracking solve problems up to size n=160.

c.  At the most, min-conflict will only as many moves as columns it has: one move to move one queen per column. However,
    since the board is randomly chosen at the beginning, it's likely that fewer moves will be needed. The book reports
    that on a million-queen problem the algorithm still only needed 50 moves!


Exercise 3.3:
a.  Both CSP and traditional search seem to use states in the same way: as different possible representations of the
    problem space. There are different actions that can be made to get from one state to another. However the
    traditional search defines both a initial state and a goal state in its __init__ function, however CSP doesn't do
    this set up at all. In fact, CSP only really uses states for tree and graph-search interfaces. Actions are a bit
    different as well. In traditional search they're seen as a way to get from one state to the next. In CSP however
    actions are viewed more as assignments to different variables. In a way it's the same thing, just a different way
    of thinking about it. Traditional search doesn't explicitly include domains either, while it's an essential part
    of CSP. The result method is effectively the same for both implementations. The goal test is very different
    between the two. In traditional search it's simply "Have we reached the goal state that was specified at the
    beginning?". It's a very simple comparison. In CSP the idea of a goal is a little bit different, as that makes
    sure that all the variables have been assigned without any conflicts.

b.  In traditional search the heuristic is used to determine the cost of taking a path. In the end one wants a path
    to the solution that cost the least amount. The heuristic estimates the cost of an action going from state1 to
    state2, and generally the action that costs the least amount will be taken. This is especially applicable in
    map/destination problems. In CSP there doesn't really seem to be an equivalent of the heuristic. As long as
    all the variables are assigned without constraints, CSP seems to be satisfied.

